// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230120234453_AddedJoinTable")]
    partial class AddedJoinTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GebruikerOnderwijsmodule", b =>
                {
                    b.Property<int>("DocentenId")
                        .HasColumnType("int");

                    b.Property<int>("OnderwijsmodulesId")
                        .HasColumnType("int");

                    b.HasKey("DocentenId", "OnderwijsmodulesId");

                    b.HasIndex("OnderwijsmodulesId");

                    b.ToTable("Gebruiker_Onderwijsmodule", (string)null);
                });

            modelBuilder.Entity("KlasOnderwijsuitvoering", b =>
                {
                    b.Property<int>("KlassenId")
                        .HasColumnType("int");

                    b.Property<int>("OnderwijsuitvoeringenId")
                        .HasColumnType("int");

                    b.HasKey("KlassenId", "OnderwijsuitvoeringenId");

                    b.HasIndex("OnderwijsuitvoeringenId");

                    b.ToTable("Klas_Onderwijsuitvoering", (string)null);
                });

            modelBuilder.Entity("LeeruitkomstLes", b =>
                {
                    b.Property<int>("LeeruitkomstenId")
                        .HasColumnType("int");

                    b.Property<int>("LessenId")
                        .HasColumnType("int");

                    b.HasKey("LeeruitkomstenId", "LessenId");

                    b.HasIndex("LessenId");

                    b.ToTable("Leeruitkomst_Les", (string)null);
                });

            modelBuilder.Entity("LeeruitkomstTentamen", b =>
                {
                    b.Property<int>("LeeruitkomstenId")
                        .HasColumnType("int");

                    b.Property<int>("TentamensId")
                        .HasColumnType("int");

                    b.HasKey("LeeruitkomstenId", "TentamensId");

                    b.HasIndex("TentamensId");

                    b.ToTable("Leeruitkomst_Tentamen", (string)null);
                });

            modelBuilder.Entity("LesLesmateriaal", b =>
                {
                    b.Property<int>("LesmaterialenId")
                        .HasColumnType("int");

                    b.Property<int>("LessenId")
                        .HasColumnType("int");

                    b.HasKey("LesmaterialenId", "LessenId");

                    b.HasIndex("LessenId");

                    b.ToTable("Les_Lesmateriaal", (string)null);
                });

            modelBuilder.Entity("LesPlanning", b =>
                {
                    b.Property<int>("LessenId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningenId")
                        .HasColumnType("int");

                    b.HasKey("LessenId", "PlanningenId");

                    b.HasIndex("PlanningenId");

                    b.ToTable("Les_Planning", (string)null);
                });

            modelBuilder.Entity("OnderwijseenheidOnderwijsmodule", b =>
                {
                    b.Property<int>("OnderwijseenhedenId")
                        .HasColumnType("int");

                    b.Property<int>("OnderwijsmodulesId")
                        .HasColumnType("int");

                    b.HasKey("OnderwijseenhedenId", "OnderwijsmodulesId");

                    b.HasIndex("OnderwijsmodulesId");

                    b.ToTable("Onderwijseenheid_Onderwijsmodule", (string)null);
                });

            modelBuilder.Entity("PlanningTentamen", b =>
                {
                    b.Property<int>("PlanningenId")
                        .HasColumnType("int");

                    b.Property<int>("TentamensId")
                        .HasColumnType("int");

                    b.HasKey("PlanningenId", "TentamensId");

                    b.HasIndex("TentamensId");

                    b.ToTable("Tentamen_Planning", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entities.Auteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Auteurs");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordeling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeoordelingsmodelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Resultaat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TentamenUploadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeoordelingsmodelId")
                        .IsUnique();

                    b.HasIndex("DocentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TentamenUploadId")
                        .IsUnique()
                        .HasFilter("[TentamenUploadId] IS NOT NULL");

                    b.ToTable("Beoordelingen");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingscriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeoordelingsonderdeelId")
                        .HasColumnType("int");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Gewicht")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Grens")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LeeruitkomstId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Resultaat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Verplicht")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BeoordelingsonderdeelId");

                    b.HasIndex("Criteria")
                        .IsUnique();

                    b.HasIndex("LeeruitkomstId");

                    b.ToTable("Beoordelingscriterium");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsdimensie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeoordelingscriteriaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijferwaarde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Toelichting")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("BeoordelingscriteriaId");

                    b.HasIndex("Titel")
                        .IsUnique();

                    b.ToTable("Beoordelingsdimensies");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsmodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TentamenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TentamenId")
                        .IsUnique();

                    b.ToTable("Beoordelingsmodellen");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsonderdeel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeoordelingsmodelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Gewicht")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Grens")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Resultaat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Verplicht")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BeoordelingsmodelId");

                    b.HasIndex("Titel")
                        .IsUnique();

                    b.ToTable("Beoordelingsonderdelen");
                });

            modelBuilder.Entity("WebAPI.Entities.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int?>("OpleidingsprofielId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OpleidingId");

                    b.HasIndex("OpleidingsprofielId");

                    b.HasIndex("RolId");

                    b.ToTable("Gebruikers");
                });

            modelBuilder.Entity("WebAPI.Entities.Klas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Klasnaam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Klasnaam")
                        .IsUnique();

                    b.ToTable("Klassen");
                });

            modelBuilder.Entity("WebAPI.Entities.Klas_Gebruiker", b =>
                {
                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<int>("KlasId")
                        .HasColumnType("int");

                    b.HasKey("GebruikerId", "KlasId");

                    b.HasIndex("KlasId");

                    b.ToTable("Klassen_Gebruikers");
                });

            modelBuilder.Entity("WebAPI.Entities.Leerdoel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OnderwijseenheidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnderwijseenheidId");

                    b.ToTable("Leerdoelen");
                });

            modelBuilder.Entity("WebAPI.Entities.Leeruitkomst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LeerdoelId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("LeerdoelId");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Leeruitkomsten");
                });

            modelBuilder.Entity("WebAPI.Entities.Les", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Lessen");
                });

            modelBuilder.Entity("WebAPI.Entities.Lesmateriaal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.Property<int>("LesmateriaaltypeId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Verplicht")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuteurId");

                    b.HasIndex("LesmateriaaltypeId");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Lesmaterialen");
                });

            modelBuilder.Entity("WebAPI.Entities.LesmateriaalInhoud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Inhoud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LesmateriaalId")
                        .HasColumnType("int");

                    b.Property<decimal>("Versie")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LesmateriaalId");

                    b.ToTable("LesmateriaalInhoud");
                });

            modelBuilder.Entity("WebAPI.Entities.LesmateriaalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("LesmateriaalTypes");
                });

            modelBuilder.Entity("WebAPI.Entities.LesmateriaalVorm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bestandstype")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("LesmateriaalId")
                        .HasColumnType("int");

                    b.Property<string>("Structuur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Versie")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LesmateriaalId");

                    b.ToTable("LesmateriaalVormen");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijseenheid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Coordinator")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Studiepunten")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Onderwijseenheden");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsmodule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Coordinator")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ingangseisen")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Leerjaar")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Studiepunten")
                        .HasColumnType("int");

                    b.Property<decimal>("Versie")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.HasIndex("OpleidingId");

                    b.HasIndex("StatusId");

                    b.ToTable("Onderwijsmodules");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsuitvoering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<int>("Jaartal")
                        .HasColumnType("int");

                    b.Property<int>("OnderwijsmoduleId")
                        .HasColumnType("int");

                    b.Property<int>("Periode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocentId");

                    b.HasIndex("OnderwijsmoduleId");

                    b.HasIndex("Jaartal", "Periode")
                        .IsUnique();

                    b.ToTable("Onderwijsuitvoeringen");
                });

            modelBuilder.Entity("WebAPI.Entities.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.HasIndex("VormId");

                    b.ToTable("Opleidingen");
                });

            modelBuilder.Entity("WebAPI.Entities.Opleidingsprofiel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.Property<string>("Profielnaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.HasIndex("Profielnaam")
                        .IsUnique();

                    b.ToTable("Opleidingsprofielen");
                });

            modelBuilder.Entity("WebAPI.Entities.Planning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("OnderwijsuitvoeringId")
                        .HasColumnType("int");

                    b.Property<int>("Weeknummer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnderwijsuitvoeringId");

                    b.HasIndex("Datum", "Weeknummer")
                        .IsUnique();

                    b.ToTable("Planningen");
                });

            modelBuilder.Entity("WebAPI.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Rollen");
                });

            modelBuilder.Entity("WebAPI.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Statussen");
                });

            modelBuilder.Entity("WebAPI.Entities.Tentamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OnderwijseenheidId")
                        .HasColumnType("int");

                    b.Property<int>("VormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.HasIndex("OnderwijseenheidId");

                    b.HasIndex("VormId");

                    b.ToTable("Tentamens");
                });

            modelBuilder.Entity("WebAPI.Entities.TentamenVanStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bestand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TentamenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("TentamenVanStudenten");
                });

            modelBuilder.Entity("WebAPI.Entities.Toetsinschrijving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TentamenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.HasIndex("TentamenId");

                    b.HasIndex("StudentId", "TentamenId", "PlanningId")
                        .IsUnique();

                    b.ToTable("Toetsinschrijvingen");
                });

            modelBuilder.Entity("WebAPI.Entities.Vorm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Naam")
                        .IsUnique();

                    b.ToTable("Vormen");
                });

            modelBuilder.Entity("GebruikerOnderwijsmodule", b =>
                {
                    b.HasOne("WebAPI.Entities.Gebruiker", null)
                        .WithMany()
                        .HasForeignKey("DocentenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Onderwijsmodule", null)
                        .WithMany()
                        .HasForeignKey("OnderwijsmodulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlasOnderwijsuitvoering", b =>
                {
                    b.HasOne("WebAPI.Entities.Klas", null)
                        .WithMany()
                        .HasForeignKey("KlassenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Onderwijsuitvoering", null)
                        .WithMany()
                        .HasForeignKey("OnderwijsuitvoeringenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeeruitkomstLes", b =>
                {
                    b.HasOne("WebAPI.Entities.Leeruitkomst", null)
                        .WithMany()
                        .HasForeignKey("LeeruitkomstenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Les", null)
                        .WithMany()
                        .HasForeignKey("LessenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeeruitkomstTentamen", b =>
                {
                    b.HasOne("WebAPI.Entities.Leeruitkomst", null)
                        .WithMany()
                        .HasForeignKey("LeeruitkomstenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Tentamen", null)
                        .WithMany()
                        .HasForeignKey("TentamensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LesLesmateriaal", b =>
                {
                    b.HasOne("WebAPI.Entities.Lesmateriaal", null)
                        .WithMany()
                        .HasForeignKey("LesmaterialenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Les", null)
                        .WithMany()
                        .HasForeignKey("LessenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LesPlanning", b =>
                {
                    b.HasOne("WebAPI.Entities.Les", null)
                        .WithMany()
                        .HasForeignKey("LessenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Planning", null)
                        .WithMany()
                        .HasForeignKey("PlanningenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnderwijseenheidOnderwijsmodule", b =>
                {
                    b.HasOne("WebAPI.Entities.Onderwijseenheid", null)
                        .WithMany()
                        .HasForeignKey("OnderwijseenhedenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Onderwijsmodule", null)
                        .WithMany()
                        .HasForeignKey("OnderwijsmodulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlanningTentamen", b =>
                {
                    b.HasOne("WebAPI.Entities.Planning", null)
                        .WithMany()
                        .HasForeignKey("PlanningenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Tentamen", null)
                        .WithMany()
                        .HasForeignKey("TentamensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordeling", b =>
                {
                    b.HasOne("WebAPI.Entities.Beoordelingsmodel", "Beoordelingsmodel")
                        .WithOne()
                        .HasForeignKey("WebAPI.Entities.Beoordeling", "BeoordelingsmodelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Gebruiker", "Docent")
                        .WithMany("DocentBeoordelingen")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.TentamenVanStudent", "TentamenUpload")
                        .WithOne("Beoordeling")
                        .HasForeignKey("WebAPI.Entities.Beoordeling", "TentamenUploadId");

                    b.Navigation("Beoordelingsmodel");

                    b.Navigation("Docent");

                    b.Navigation("Status");

                    b.Navigation("TentamenUpload");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingscriteria", b =>
                {
                    b.HasOne("WebAPI.Entities.Beoordelingsonderdeel", "Beoordelingsonderdeel")
                        .WithMany("Beoordelingscriterium")
                        .HasForeignKey("BeoordelingsonderdeelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Leeruitkomst", "Leeruitkomst")
                        .WithMany("Beoordelingscriterium")
                        .HasForeignKey("LeeruitkomstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beoordelingsonderdeel");

                    b.Navigation("Leeruitkomst");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsdimensie", b =>
                {
                    b.HasOne("WebAPI.Entities.Beoordelingscriteria", "Beoordelingscriteria")
                        .WithMany("Beoordelingsdimensies")
                        .HasForeignKey("BeoordelingscriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beoordelingscriteria");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsmodel", b =>
                {
                    b.HasOne("WebAPI.Entities.Gebruiker", "Docent")
                        .WithMany("Beoordelingsmodellen")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Tentamen", "Tentamen")
                        .WithOne("Beoordelingsmodel")
                        .HasForeignKey("WebAPI.Entities.Beoordelingsmodel", "TentamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docent");

                    b.Navigation("Status");

                    b.Navigation("Tentamen");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsonderdeel", b =>
                {
                    b.HasOne("WebAPI.Entities.Beoordelingsmodel", "Beoordelingsmodel")
                        .WithMany("Beoordelingsonderdelen")
                        .HasForeignKey("BeoordelingsmodelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beoordelingsmodel");
                });

            modelBuilder.Entity("WebAPI.Entities.Gebruiker", b =>
                {
                    b.HasOne("WebAPI.Entities.Opleiding", "Opleiding")
                        .WithMany()
                        .HasForeignKey("OpleidingId");

                    b.HasOne("WebAPI.Entities.Opleidingsprofiel", "Opleidingsprofiel")
                        .WithMany()
                        .HasForeignKey("OpleidingsprofielId");

                    b.HasOne("WebAPI.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Opleidingsprofiel");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("WebAPI.Entities.Klas_Gebruiker", b =>
                {
                    b.HasOne("WebAPI.Entities.Gebruiker", "Gebruiker")
                        .WithMany("Klas_Gebruiker")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Klas", "Klas")
                        .WithMany("Klas_Gebruiker")
                        .HasForeignKey("KlasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");

                    b.Navigation("Klas");
                });

            modelBuilder.Entity("WebAPI.Entities.Leerdoel", b =>
                {
                    b.HasOne("WebAPI.Entities.Onderwijseenheid", "Onderwijseenheid")
                        .WithMany("Leerdoelen")
                        .HasForeignKey("OnderwijseenheidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Onderwijseenheid");
                });

            modelBuilder.Entity("WebAPI.Entities.Leeruitkomst", b =>
                {
                    b.HasOne("WebAPI.Entities.Leerdoel", "Leerdoel")
                        .WithMany("Leeruitkomsten")
                        .HasForeignKey("LeerdoelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leerdoel");
                });

            modelBuilder.Entity("WebAPI.Entities.Lesmateriaal", b =>
                {
                    b.HasOne("WebAPI.Entities.Auteur", "Auteur")
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.LesmateriaalType", "LesmateriaalType")
                        .WithMany()
                        .HasForeignKey("LesmateriaaltypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("LesmateriaalType");
                });

            modelBuilder.Entity("WebAPI.Entities.LesmateriaalInhoud", b =>
                {
                    b.HasOne("WebAPI.Entities.Lesmateriaal", "Lesmateriaal")
                        .WithMany("LesmateriaalInhoud")
                        .HasForeignKey("LesmateriaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesmateriaal");
                });

            modelBuilder.Entity("WebAPI.Entities.LesmateriaalVorm", b =>
                {
                    b.HasOne("WebAPI.Entities.Lesmateriaal", "Lesmateriaal")
                        .WithMany("LesmateriaalVormen")
                        .HasForeignKey("LesmateriaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesmateriaal");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsmodule", b =>
                {
                    b.HasOne("WebAPI.Entities.Opleiding", "Opleiding")
                        .WithMany("Onderwijsmodules")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Opleiding");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsuitvoering", b =>
                {
                    b.HasOne("WebAPI.Entities.Gebruiker", "Docent")
                        .WithMany("Onderwijsuitvoeringen")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Onderwijsmodule", "Onderwijsmodule")
                        .WithMany("Onderwijsuitvoeringen")
                        .HasForeignKey("OnderwijsmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docent");

                    b.Navigation("Onderwijsmodule");
                });

            modelBuilder.Entity("WebAPI.Entities.Opleiding", b =>
                {
                    b.HasOne("WebAPI.Entities.Vorm", "Vorm")
                        .WithMany()
                        .HasForeignKey("VormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vorm");
                });

            modelBuilder.Entity("WebAPI.Entities.Opleidingsprofiel", b =>
                {
                    b.HasOne("WebAPI.Entities.Opleiding", "Opleiding")
                        .WithMany("Opleidingsprofielen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opleiding");
                });

            modelBuilder.Entity("WebAPI.Entities.Planning", b =>
                {
                    b.HasOne("WebAPI.Entities.Onderwijsuitvoering", "Onderwijsuitvoering")
                        .WithMany("Planningen")
                        .HasForeignKey("OnderwijsuitvoeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Onderwijsuitvoering");
                });

            modelBuilder.Entity("WebAPI.Entities.Tentamen", b =>
                {
                    b.HasOne("WebAPI.Entities.Onderwijseenheid", null)
                        .WithMany("Tentamens")
                        .HasForeignKey("OnderwijseenheidId");

                    b.HasOne("WebAPI.Entities.Vorm", "Vorm")
                        .WithMany()
                        .HasForeignKey("VormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vorm");
                });

            modelBuilder.Entity("WebAPI.Entities.TentamenVanStudent", b =>
                {
                    b.HasOne("WebAPI.Entities.Gebruiker", "Student")
                        .WithMany("TentamensVanStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebAPI.Entities.Toetsinschrijving", b =>
                {
                    b.HasOne("WebAPI.Entities.Planning", "Planning")
                        .WithMany()
                        .HasForeignKey("PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Gebruiker", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Tentamen", "Tentamen")
                        .WithMany()
                        .HasForeignKey("TentamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planning");

                    b.Navigation("Student");

                    b.Navigation("Tentamen");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingscriteria", b =>
                {
                    b.Navigation("Beoordelingsdimensies");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsmodel", b =>
                {
                    b.Navigation("Beoordelingsonderdelen");
                });

            modelBuilder.Entity("WebAPI.Entities.Beoordelingsonderdeel", b =>
                {
                    b.Navigation("Beoordelingscriterium");
                });

            modelBuilder.Entity("WebAPI.Entities.Gebruiker", b =>
                {
                    b.Navigation("Beoordelingsmodellen");

                    b.Navigation("DocentBeoordelingen");

                    b.Navigation("Klas_Gebruiker");

                    b.Navigation("Onderwijsuitvoeringen");

                    b.Navigation("TentamensVanStudent");
                });

            modelBuilder.Entity("WebAPI.Entities.Klas", b =>
                {
                    b.Navigation("Klas_Gebruiker");
                });

            modelBuilder.Entity("WebAPI.Entities.Leerdoel", b =>
                {
                    b.Navigation("Leeruitkomsten");
                });

            modelBuilder.Entity("WebAPI.Entities.Leeruitkomst", b =>
                {
                    b.Navigation("Beoordelingscriterium");
                });

            modelBuilder.Entity("WebAPI.Entities.Lesmateriaal", b =>
                {
                    b.Navigation("LesmateriaalInhoud");

                    b.Navigation("LesmateriaalVormen");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijseenheid", b =>
                {
                    b.Navigation("Leerdoelen");

                    b.Navigation("Tentamens");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsmodule", b =>
                {
                    b.Navigation("Onderwijsuitvoeringen");
                });

            modelBuilder.Entity("WebAPI.Entities.Onderwijsuitvoering", b =>
                {
                    b.Navigation("Planningen");
                });

            modelBuilder.Entity("WebAPI.Entities.Opleiding", b =>
                {
                    b.Navigation("Onderwijsmodules");

                    b.Navigation("Opleidingsprofielen");
                });

            modelBuilder.Entity("WebAPI.Entities.Tentamen", b =>
                {
                    b.Navigation("Beoordelingsmodel")
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Entities.TentamenVanStudent", b =>
                {
                    b.Navigation("Beoordeling")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
